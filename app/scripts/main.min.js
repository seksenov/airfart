/*
 *
 *  Air Horner
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function() {
  'use strict';

  var Horn = function() {
    // The Horn Player.

    var audioSrc = '/sounds/airhorn.mp3';
    var noAudioContext = false;
    var fallbackAudio;
    var audioCtx = (window.AudioContext || window.webkitAudioContext);
    var self = this;
    var source;
    var buffer;

    if (audioCtx !== undefined) {
      audioCtx = new audioCtx();
    } else  {
      noAudioContext = true;
      fallbackAudio = document.createElement('audio');
    }

    var loadSound = function(callback) {
      callback = callback || function() {};

      if (noAudioContext) {
        fallbackAudio.src = audioSrc;
        return;
      }

      if(!!buffer == true) {
        // If the buffer is already loaded, use that.
        callback(buffer);
        return;
      }

      var xhr = new XMLHttpRequest();

      xhr.onload = function() {
        audioCtx.decodeAudioData(xhr.response, function(decodedBuffer) {
          callback(decodedBuffer);
        });
      };

      xhr.open('GET', audioSrc);
      xhr.responseType = 'arraybuffer';
      xhr.send();
    };


    this.start = function(opts) {
      var shouldLoop = opts.loop; // always loop if from an event.

      if (noAudioContext) {
        fallbackAudio.loop = shouldLoop;
        fallbackAudio.currentTime = 0;
        fallbackAudio.play();
        return;
      }

      loadSound(function(tmpBuffer) {
        source = audioCtx.createBufferSource();

        source.connect(audioCtx.destination);

        source.buffer = tmpBuffer;

        source.onended = function () {
          self.stop();
        };

        source.start(0);
        source.loop = shouldLoop;
        source.loopStart = 0.24;
        source.loopEnd = 0.34;

      });
    };

    this.stop = function() {
      if(!!source === true)
        source.loop = false;

      if (noAudioContext) {
        fallbackAudio.loop = false;
        fallbackAudio.pause();
      }

      this.onstopped();
    };

    this.onstopped = function() {};

    var init = function() {

      loadSound(function(decodedBuffer) {
        buffer = decodedBuffer;
      });
    };

    init();

  };

  var Installer = function(root) {

    var tooltip = root.querySelector('.tooltip');

    var install = function(e) {
      e.preventDefault();
      window.install.prompt()
        .then(function(outcome) {
          // The user actioned the prompt (good or bad).
          ga('send', 'event', 'install', outcome);
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
          ga('send', 'event', 'install', 'errored');
        });
    };

    var init = function() {
      window.install.canPrompt()
        .then(function() {
            root.classList.add('available');
            ga('send', 'event', 'install', 'prompted');
        });
    };

    root.addEventListener('click', install.bind(this));
    root.addEventListener('touchend', install.bind(this));

    init();
  };

  var AirHorn = function(root) {
    // Controls the AirHorn.

    var airhornImage = root.querySelector('.horn');
    var horn = new Horn();

    var start = function (e) {
      if(!!e == true) {
        e.preventDefault();

        if(e.touches && e.touches.length > 1) {
          // Multi touch. OFF.
          return false;
        }
      }

      this.start({loop: true});
    }

    var stop = function(e) {
      if(!!e == true) e.preventDefault();
      this.stop();
    }

    this.start = function(opts) {
      // Play the sound
      airhornImage.classList.add('horning');
      horn.start(opts);
      // Start the poop
      generateSnowflakes();

      horn.onstopped = function() {
        airhornImage.classList.remove('horning');
      };

      //ga('send', 'event', 'horn', 'play');
    };

    this.stop = function() {
      // Stop the sound
      airhornImage.classList.remove('horning');
      horn.stop();
      // Stop the poop
      stopShit();

    };

    airhornImage.addEventListener('mousedown', start.bind(this));
    airhornImage.addEventListener('touchstart', start.bind(this));

    document.documentElement.addEventListener('mouseup', stop.bind(this));
    document.documentElement.addEventListener('touchend', stop.bind(this));

  };

(function() {

  var deferredInstall;
  var promptTriggered = false;
  // The resolve function that will be called when we know we can prompt.
  var canPromptPromiseResolved;
  var canPromptPromise = new Promise(function(resolve, reject) {
    // The resolve will be called later when we know the prompt has been shown.
    // We might want to reject after a timeout of a couple of seconds.
    canPromptPromiseResolved = resolve;
  });


  window.addEventListener('beforeinstallprompt',function(e) {

    promptTriggered = true;

    // Stop it doing what it needs to do;
    e.preventDefault();
    deferredInstall = e;

    // Resolve the promise, to say that we know we can prompt.
    canPromptPromiseResolved();

    return false;
  });

  var install = {};

  Object.defineProperty(install, 'isAvailable', { get: function() { return promptTriggered; } });

  install.canPrompt = function() {
    return canPromptPromise;
  };

  install.prompt = function () {
    return new Promise(function(resolve, reject){
      if(promptTriggered === false) {
        // There can be a whole host or reasons, we should determine them
        reject('User Agent decided not to prompt');
      };

      deferredInstall.prompt().then(function() {
        return deferredInstall.userChoice
      }).then(function(choice) {
        resolve(choice.outcome);
      }).catch(function(reason) {
        reject(reason);
      });
    });
  };

  window.install = install;
})();

  window.addEventListener('load', function() {
    var airhornEl = document.getElementById('airhorn');
    var installEl = document.getElementById('installer');
    var airhorn = new AirHorn(airhornEl);
    var installer = new Installer(installEl);

    if(location.hash == '#instant') {
      airhorn.start({ loop: false });
    }

    window.addEventListener('hashchange', function() {
      if(location.hash == '#instant') {
        airhorn.start({ loop: false });
      }
    });

    document.addEventListener('visibilitychange', function() {
      if(document.hidden) {
        airhorn.stop();
      }
    });
  });

//
// To learn more about this effect, go to: http://www.kirupa.com/html5/the_falling_snow_effect.htm
//

// The star of every good animation
var requestAnimationFrame = window.requestAnimationFrame || 
                            window.mozRequestAnimationFrame || 
                            window.webkitRequestAnimationFrame ||
                            window.msRequestAnimationFrame;

var transforms = ["transform", 
                  "msTransform", 
                  "webkitTransform", 
                  "mozTransform", 
                  "oTransform"];
                   
var transformProperty = getSupportedPropertyName(transforms);

// Array to store our Snowflake objects
var snowflakes = [];

// Global variables to store our browser's window size
var browserWidth;
var browserHeight;

// Specify the number of snowflakes you want visible
var numberOfSnowflakes = 100;

// Flag to reset the position of the snowflakes
var resetPosition = false;

// Animation speed
//var speed = 20+Math.random()*40;

//
// Vendor prefix management
//
function getSupportedPropertyName(properties) {
    for (var i = 0; i < properties.length; i++) {
        if (typeof document.body.style[properties[i]] != "undefined") {
            return properties[i];
        }
    }
    return null;
}

//
// Constructor for our Snowflake object
//
function Snowflake(element, speed, xPos, yPos) {

	// set initial snowflake properties
    this.element = element;
    this.speed = speed;
    this.xPos = xPos;
    this.yPos = yPos;
	
	// declare variables used for snowflake's motion
    this.counter = 0;
    this.sign = Math.random() < 0.5 ? 1 : -1;
	
	// setting an initial opacity and size for our snowflake
    this.element.style.opacity = .1 + Math.random();
    var sc = 1 + Math.random();
    //this.element.setAttribute("transform", "scale("+.001+")");
    this.element.setAttribute("width", Math.round(55 * sc));
    this.element.setAttribute("height", Math.round(55 * sc));
}

//
// The function responsible for actually moving our snowflake
//
Snowflake.prototype.update = function () {

	// using some trigonometry to determine our x and y position
	this.counter += this.speed / 5000;
	this.xPos += this.sign * this.speed * Math.cos(this.counter) / 40;
	this.yPos += Math.sin(this.counter) / 40 + this.speed / 30;
	
	// setting our snowflake's position
	setTranslate3DTransform(this.element, Math.round(this.xPos), Math.round(this.yPos));
    
    // if snowflake goes below the browser window, move it back to the top
	if (this.yPos > browserHeight + 100) {
		this.yPos = -150;
	}
}

//
// A performant way to set your snowflake's position
//
function setTranslate3DTransform(element, xPosition, yPosition) {
	var val = "translate3d(" + xPosition + "px, " + yPosition + "px" + ", 0)";
    element.style[transformProperty] = val;
}

//
// The function responsible for creating the snowflake
//
function generateSnowflakes() {
	
	// get our snowflake element from the DOM and store it
	var originalSnowflake = document.querySelector(".snowflake");
    originalSnowflake.style.visibility = "";
	
	// access our snowflake element's parent container
	var snowflakeContainer = originalSnowflake.parentNode;
    
    // get our browser's size
	browserWidth = document.documentElement.clientWidth;
	browserHeight = document.documentElement.clientHeight;
	        
    // create each individual snowflake
	for (var i = 0; i < numberOfSnowflakes; i++) {
	
		// clone our original snowflake and add it to snowflakeContainer
		var snowflakeClone = originalSnowflake.cloneNode(true);
		snowflakeContainer.appendChild(snowflakeClone);
	
		// set our snowflake's initial position and related properties
	    var initialXPos = getPosition(50, browserWidth);
	    var initialYPos = getPosition(50, -1000);
	    var speed = 5+Math.random()*40;
	    
	    // create our Snowflake object
		var snowflakeObject = new Snowflake(snowflakeClone, 
											speed, 
											initialXPos, 
											initialYPos);
		snowflakes.push(snowflakeObject);
	}
    
    // remove the original snowflake because we no longer need it visible
	snowflakeContainer.removeChild(originalSnowflake);
	
	// call the moveSnowflakes function every 30 milliseconds
    moveSnowflakes();
}

//
// Responsible for moving each snowflake by calling its update function
//
function moveSnowflakes() {
	for (var i = 0; i < snowflakes.length; i++) {
	    var snowflake = snowflakes[i];
	    snowflake.update();
	}
    
	// Reset the position of all the snowflakes to a new value
	if (resetPosition) {
		browserWidth = document.documentElement.clientWidth;
		browserHeight = document.documentElement.clientHeight; 
		
		for (var i = 0; i < snowflakes.length; i++) {
			var snowflake = snowflakes[i];
			
			snowflake.xPos = getPosition(50, browserWidth);
			snowflake.yPos = getPosition(50, browserHeight);
		}
		
		resetPosition = false;
	}
    
    requestAnimationFrame(moveSnowflakes);
}

//
// This function returns a number between (maximum - offset) and (maximum + offset)
//
function getPosition(offset, size) {
	return Math.round(-1*offset + Math.random() * (size+2*offset));
}

//
// Trigger a reset of all the snowflakes' positions
//
function setResetFlag(e) {
	resetPosition = true;
}

//
// Delete all snowflakes
//
function stopShit() {

    //var snowLength = snowflakes.length - 1;
    for (var i = 0; i < snowflakes.length - 1; i++) {
        //console.log(snowflakes[i]);
        snowflakes[i].element.parentNode.removeChild(snowflakes[i].element);
    }
    document.getElementsByClassName("snowflake")[0].style.visibility = "hidden";
    snowflakes = [];
}

})();
